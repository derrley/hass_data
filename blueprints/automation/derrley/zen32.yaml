blueprint:
  name: ZEN32 TESTING
  description: |
    Link your ZEN32 Scene Controller to light groups and scenes.

    Link a light or a light group, and the big button will control it. Its LED
    will reflect the status of the light (red means off, green means on, blue
    means dimmed more than half way), and double tap for full brightness. If
    you provide a light group, this automation will link the four small ZEN32
    buttons to the first four lights in the light group.

    This automation triggers on light state change, so it only supports the
    controlling of multiple lights through groups. Otherwise, the automation
    would trigger too many times (and do duplicative work). 

    Link a scene to each button as well. Triple-tap on the button will trigger
    the scene.

  domain: automation
  input:
    switch:
      name: Scene Controller
      selector:
        device:
          integration: zwave_js
          manufacturer: Zooz
          model: ZEN32

    main_light:
      name: Light Linked To Main Button
      default: []
      selector:
        entity:
          domain: light

    main_indicator:
      name: Input Select Linked To Main button
      default: []
      selector:
        entity:
          domain: input_select
    top_left_indicator:
      name: Input Select Linked To Top Left button
      default: []
      selector:
        entity:
          domain: input_select
    top_right_indicator:
      name: Input Select Linked To Top Right Button
      default: []
      selector:
        entity:
          domain: input_select
    bottom_left_indicator:
      name: Input Select Linked To Bottom Left Button
      default: []
      selector:
        entity:
          domain: input_select
    bottom_right_indicator:
      name: Input Select Linked To Bottom Right Button
      default: []
      selector:
        entity:
          domain: input_select

    top_left_scene:
      name: Scene Linked To Top Left Button
      default: []
      selector:
        entity:
          domain: scene

    top_right_scene:
      name: Scene Linked To Top Right Button
      default: []
      selector:
        entity:
          domain: scene

    bottom_left_scene:
      name: Scene Linked To Bottom Left Button
      default: []
      selector:
        entity:
          domain: scene

    bottom_right_scene:
      name: Scene Linked To Bottom Right Button
      default: []
      selector:
        entity:
          domain: scene

variables:
  main_light: !input main_light
  switch: !input switch

  single_press: "{{ trigger.event.data.value == 'KeyPressed' if trigger.platform == 'event' else None}}"
  double_press: "{{ trigger.event.data.value == 'KeyPressed2x' if trigger.platform == 'event' else None}}"
  triple_press: "{{ trigger.event.data.value == 'KeyPressed3x' if trigger.platform == 'event' else None}}"

  switch_press: "{{ trigger.event.data.device_id == switch if trigger.platform == 'event' else None}}"
  switch_button: "{{ trigger.event.data.property_key if trigger.platform == 'event' else None}}"

  input_select_changed: "{{ trigger.entity_id.startswith('input_select') if trigger.platform == 'state' }}"

  # Variables used in executing this automation, keyed on the button ID.
  # Main button: 5
  # Top Left: 1
  # Top Right: 2
  # Bottom Left: 3
  # Bottom Right: 4
  button_vars:
    '005':
      light: "{{ main_light }}"
    '001':
      light: "{{ (state_attr(main_light, 'entity_id') or [])[0:1] }}"
      scene: !input top_left_scene
    '002':
      light: "{{ (state_attr(main_light, 'entity_id') or [])[1:2] }}"
      scene: !input top_right_scene
    '003':
      light: "{{ (state_attr(main_light, 'entity_id') or [])[2:3] }}"
      scene: !input bottom_left_scene
    '004':
      light: "{{ (state_attr(main_light, 'entity_id') or [])[3:4] }}"
      scene: !input bottom_right_scene

  # Input selects mapped to light group index values.
  input_selects:
    - !input top_left_indicator
    - !input top_right_indicator
    - !input bottom_left_indicator
    - !input bottom_right_indicator

  trigger_vars:
    main_indicator_state_change:
      light_color_param: 6
    top_left_indicator_state_change:
      light_color_param: 7
    top_right_indicator_state_change:
      light_color_param: 8
    bottom_left_indicator_state_change:
      light_color_param: 9
    bottom_right_indicator_state_change:
      light_color_param: 10

trigger:
  - id: main_state_change
    platform: state
    entity_id: !input main_light

  - id: main_indicator_state_change
    platform: state
    entity_id: !input main_indicator
  - id: top_left_indicator_state_change
    platform: state
    entity_id: !input top_left_indicator
  - id: top_right_indicator_state_change
    platform: state
    entity_id: !input top_right_indicator
  - id: bottom_left_indicator_state_change
    platform: state
    entity_id: !input bottom_left_indicator
  - id: bottom_right_indicator_state_change
    platform: state
    entity_id: !input bottom_right_indicator

  - id: main_button_press
    platform: event
    event_type: zwave_js_value_notification
    event_data:
      device_id: !input switch

condition: []
action:
- choose:

  - conditions: "{{ trigger.platform == 'state' and input_select_changed }}"
    sequence:
    - service: zwave_js.set_config_parameter
      target:
        device_id: !input switch
      data:
        parameter: "{{ trigger_vars[trigger.id].light_color_param }}"
        value: "{{ trigger.to_state.state }}"

  - conditions: "{{ trigger.platform == 'state' }}"
    sequence:
    - service: input_select.select_option
      target:
        entity_id: !input main_indicator
      data:
        option: "{{ 'Red' if states(trigger.entity_id) == 'off' else 'Blue' if (state_attr(trigger.entity_id, 'brightness') or 255) < 127 else 'Green' }}"
    - repeat:
        for_each: "{{ state_attr(main_light, 'entity_id') or [] }}"
        sequence:
        - service: input_select.select_option
          target:
            entity_id: "{{ input_selects[repeat.index - 1] }}"
          data:
            option: "{{ 'Red' if states(repeat.item) == 'off' else 'Blue' if (state_attr(repeat.item, 'brightness') or 255) < 127 else 'Green' }}"

  - conditions: "{{ switch_press and single_press }}"
    sequence:
    - service: light.toggle
      target:
        entity_id: "{{ button_vars[switch_button].light }}"

  - conditions: "{{ switch_press and double_press }}"
    sequence:
    - service: light.turn_on
      target:
        entity_id: "{{ button_vars[switch_button].light }}"
      data:
        brightness: 255

  - conditions: "{{ switch_press and triple_press }}"
    sequence:
    - service: scene.turn_on
      target:
        entity_id: "{{ button_vars[switch_button].scene }}"

mode: queued
trace:
  stored_traces: 20
